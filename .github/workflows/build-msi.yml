name: Build MSI Package

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Install WiX
        run: |
          Write-Host "Installing WiX v6..."
          try {
            dotnet tool install --global wix
            Write-Host "WiX installation completed"
            wix --version
          } catch {
            Write-Error "Failed to install WiX: $_"
            exit 1
          }

      - name: Get Version
        id: get_version
        run: |
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Build Windows Binary
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $env:CGO_ENABLED = "1"
          go build -o cloudbridge-client.exe ./cmd/cloudbridge-client

      - name: Create MSI Package
        run: |
          Write-Host "Creating MSI package..."
          
          # Create directories
          New-Item -ItemType Directory -Force -Path "msi\bin"
          New-Item -ItemType Directory -Force -Path "msi\config"
          New-Item -ItemType Directory -Force -Path "msi\logs"
          
          # Copy files
          Write-Host "Copying executable..."
          Copy-Item "cloudbridge-client.exe" -Destination "msi\bin\"
          
          Write-Host "Copying config file..."
          if (Test-Path "config\config.yaml") {
              Copy-Item "config\config.yaml" -Destination "msi\config\"
          } else {
              Write-Host "Creating default config file..."
              Set-Content -Path "msi\config\config.yaml" -Value "server:`n  host: localhost`n  port: 8080`n`ntls:`n  enabled: false`n  cert_file: ``"`n  key_file: ``"`n`nlogging:`n  level: info`n  file: client.log" -Encoding UTF8
          }
          
          Write-Host "Building MSI package with WiX v6..."
          dotnet build msi\CloudBridgeClient.wixproj -c Release -p:Version=$env:VERSION
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to create MSI package"
              exit 1
          }
          
          # Move MSI to root directory
          Move-Item -Path "msi\bin\Release\en-us\CloudBridgeClient.msi" -Destination "CloudBridgeClient.msi" -Force
          
          # Verify MSI was created
          if (Test-Path "CloudBridgeClient.msi") {
              Write-Host "MSI package created successfully"
              Get-Item "CloudBridgeClient.msi" | Select-Object Name, Length, LastWriteTime
              
              # Verify MSI package
              Write-Host "Verifying MSI package..."
              $msiInfo = & {
                  $msi = New-Object -ComObject WindowsInstaller.Installer
                  $database = $msi.OpenDatabase("CloudBridgeClient.msi", 0)
                  $view = $database.OpenView("SELECT * FROM Property WHERE Property = 'ProductVersion'")
                  $view.Execute()
                  $record = $view.Fetch()
                  $version = $record.StringData(2)
                  $view.Close()
                  $database.Close()
                  $version
              }
              Write-Host "MSI Product Version: $msiInfo"
              
              if ($msiInfo -ne $env:VERSION) {
                  Write-Error "MSI version mismatch. Expected: $env:VERSION, Got: $msiInfo"
                  exit 1
              }
          } else {
              Write-Error "MSI package creation failed"
              exit 1
          }

      - name: Upload MSI Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloudbridge-client-msi
          path: CloudBridgeClient.msi
          if-no-files-found: error

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: CloudBridgeClient.msi
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 