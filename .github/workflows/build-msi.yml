name: Build and Package MSI

on:
  workflow_dispatch:
    inputs:
      uploadAsLatest:
        type: string
        default: "False"
        required: false
        description: 'Also upload the msi installer to storage account as latest'
      version:
        type: string
        default: ""
        required: false
        description: 'Version to build (optional). Will use git tag version if not specified.'

permissions:
  id-token: write
  contents: read

env:
  AZURE_ACCOUNT_NAME: cloudbridge-artifacts
  AZURE_MSI_CONTAINER_NAME: msi-installer

jobs:
  build_msi_installer:
    runs-on: windows-latest
    name: Build Windows MSI
    environment:
      production
    steps:
      - name: Check input parameters
        run: |
          echo "uploadAsLatest: ${{ inputs.uploadAsLatest }}"
          echo "version: ${{ inputs.version }}"

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Install WiX
        run: |
          Write-Host "Installing WiX v6..."
          try {
            dotnet tool install --global wix
            Write-Host "WiX installation completed"
            wix --version
          } catch {
            Write-Error "Failed to install WiX: $_"
            exit 1
          }

      - name: Get Version
        id: get_version
        run: |
          if ($env:INPUT_VERSION) {
            $version = $env:INPUT_VERSION
          } else {
            $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          }
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Build Windows Binary
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $env:CGO_ENABLED = "1"
          go build -o cloudbridge-client.exe ./cmd/cloudbridge-client

      - name: Create MSI Package
        run: |
          Write-Host "Creating MSI package..."
          
          # Create directories
          New-Item -ItemType Directory -Force -Path "msi\bin"
          New-Item -ItemType Directory -Force -Path "msi\config"
          New-Item -ItemType Directory -Force -Path "msi\logs"
          
          # Copy files
          Write-Host "Copying executable..."
          Copy-Item "cloudbridge-client.exe" -Destination "msi\bin\"
          
          Write-Host "Copying config file..."
          if (Test-Path "config\config.yaml") {
              Copy-Item "config\config.yaml" -Destination "msi\config\"
          } else {
              Write-Host "Creating default config file..."
              Set-Content -Path "msi\config\config.yaml" -Value "server:`n  host: localhost`n  port: 8080`n`ntls:`n  enabled: false`n  cert_file: ``"`n  key_file: ``"`n`nlogging:`n  level: info`n  file: client.log" -Encoding UTF8
          }
          
          Write-Host "Building MSI package with WiX v6..."
          dotnet build msi\CloudBridgeClient.wixproj -c Release -p:Version=$env:VERSION
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to create MSI package"
              exit 1
          }
          
          # Move MSI to root directory
          Move-Item -Path "msi\bin\Release\en-us\CloudBridgeClient.msi" -Destination "CloudBridgeClient.msi" -Force
          
          # Verify MSI was created
          if (Test-Path "CloudBridgeClient.msi") {
              Write-Host "MSI package created successfully"
              Get-Item "CloudBridgeClient.msi" | Select-Object Name, Length, LastWriteTime
              
              # Verify MSI package
              Write-Host "Verifying MSI package..."
              $msiInfo = & {
                  $msi = New-Object -ComObject WindowsInstaller.Installer
                  $database = $msi.OpenDatabase("CloudBridgeClient.msi", 0)
                  $view = $database.OpenView("SELECT * FROM Property WHERE Property = 'ProductVersion'")
                  $view.Execute()
                  $record = $view.Fetch()
                  $version = $record.StringData(2)
                  $view.Close()
                  $database.Close()
                  $version
              }
              Write-Host "MSI Product Version: $msiInfo"
              
              if ($msiInfo -ne $env:VERSION) {
                  Write-Error "MSI version mismatch. Expected: $env:VERSION, Got: $msiInfo"
                  exit 1
              }
          } else {
              Write-Error "MSI package creation failed"
              exit 1
          }

      - uses: azure/login@v1
        with:
          subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID}}
          tenant-id: ${{secrets.AZURE_TENANT_ID}}
          client-id: ${{secrets.AZURE_CLIENT_ID}}

      - name: Download JSON file from Azure Blob Storage
        id: download-json
        run: |
          az storage blob download --account-name ${{ env.AZURE_ACCOUNT_NAME }} --container-name ${{ env.AZURE_MSI_CONTAINER_NAME }} --name latest_version.json --file downloaded_version.json --auth-mode login
          $downloaded_version = (Get-Content downloaded_version.json | ConvertFrom-Json).cloudbridge
          echo "::set-output name=downloaded_version::$downloaded_version"

      - name: Check if version input is valid and upload JSON file
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $downloaded_version = "${{ steps.download-json.outputs.downloaded_version }}"
          $uploadAsLatest = "${{ github.event.inputs.uploadAsLatest }}"
          if ($uploadAsLatest -ieq 'True' -and $version -like '1.*' -and [Version]$version -gt [Version]$downloaded_version){
            $jsonContent = @{
              "cloudbridge" = $version
            } | ConvertTo-Json -Depth 100
            $jsonContent | Out-File -FilePath latest_version.json -Encoding UTF8
            Write-Output "Created latest_version.json with version: $version"
            az storage blob upload --account-name ${{ env.AZURE_ACCOUNT_NAME }} --container-name ${{ env.AZURE_MSI_CONTAINER_NAME }} --file "latest_version.json" --name "latest_version.json" --overwrite --auth-mode login
          } else {
            Write-Output "skip uploading since version input isn't greater than latest version or does not start with '1.'"
          }

      - name: Upload to Azure Storage
        run: |
          function Upload-File($filePath, $blobName, $containerName) {
            az storage blob upload --account-name ${{ env.AZURE_ACCOUNT_NAME }} --container-name $containerName --file $filePath --name $blobName --overwrite --auth-mode login
          }
    
          if ($env:INPUT_UPLOADASLATEST -ieq 'True') {
            Upload-File "CloudBridgeClient.msi" "cloudbridge.msi" ${{ env.AZURE_MSI_CONTAINER_NAME }}
            az storage blob copy start --account-name ${{ env.AZURE_ACCOUNT_NAME }} --destination-container ${{ env.AZURE_MSI_CONTAINER_NAME }} --destination-blob "CloudBridgeClient-${{ steps.get_version.outputs.version }}.msi" --source-container ${{ env.AZURE_MSI_CONTAINER_NAME }} --source-blob "cloudbridge.msi" --auth-mode login
          } else {
            Upload-File "CloudBridgeClient.msi" "CloudBridgeClient-${{ steps.get_version.outputs.version }}.msi" ${{ env.AZURE_MSI_CONTAINER_NAME }}
          }
        env:
          INPUT_UPLOADASLATEST: ${{ github.event.inputs.uploadAsLatest }}
        shell: pwsh

      - name: Upload MSI Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloudbridge-client-msi
          path: CloudBridgeClient.msi
          if-no-files-found: error 