name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21.13'
  CGO_ENABLED: 0

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Run tests with race detector
        run: |
          export CGO_ENABLED=1
          go test -v -race ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          fail_ci_if_error: false
        continue-on-error: true

      - name: Display coverage summary
        run: |
          if [ -f coverage.txt ]; then
            echo "=== Coverage Report ==="
            echo "Total coverage:"
            go tool cover -func=coverage.txt | tail -1
            echo ""
            echo "Coverage by package:"
            go tool cover -func=coverage.txt | grep -E "(github\.com|total:)"
            echo ""
            echo "HTML coverage report generated in coverage.txt"
          else
            echo "No coverage report generated"
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.57.2

      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m

  build: 
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: |
          go build -v -o cloudbridge-client ./cmd/cloudbridge-client

      - name: Test binary
        run: |
          ./cloudbridge-client --help

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: cloudbridge-client 