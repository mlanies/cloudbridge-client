name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21.13'
  CGO_ENABLED: 0

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Run tests with race detector
        run: |
          export CGO_ENABLED=1
          go test -v -race ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          fail_ci_if_error: false
        continue-on-error: true

      - name: Display coverage summary
        run: |
          if [ -f coverage.txt ]; then
            echo "=== Coverage Report ==="
            echo "Total coverage:"
            go tool cover -func=coverage.txt | tail -1
            echo ""
            echo "Coverage by package:"
            go tool cover -func=coverage.txt | grep -E "(github\.com|total:)"
            echo ""
            echo "HTML coverage report generated in coverage.txt"
          else
            echo "No coverage report generated"
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.57.2

      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m

  build: 
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: |
          go build -v -o cloudbridge-client ./cmd/cloudbridge-client

      - name: Test binary
        run: |
          ./cloudbridge-client --help

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: cloudbridge-client

  release:
    name: Create Release
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for all platforms
        run: |
          mkdir -p build
          
          # Windows
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o build/cloudbridge-client-windows-amd64.exe ./cmd/cloudbridge-client
          GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o build/cloudbridge-client-windows-arm64.exe ./cmd/cloudbridge-client

          # Linux
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o build/cloudbridge-client-linux-amd64 ./cmd/cloudbridge-client
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o build/cloudbridge-client-linux-arm64 ./cmd/cloudbridge-client

          # macOS
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o build/cloudbridge-client-darwin-amd64 ./cmd/cloudbridge-client
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o build/cloudbridge-client-darwin-arm64 ./cmd/cloudbridge-client

      - name: Test Linux binary
        run: |
          chmod +x build/cloudbridge-client-linux-amd64
          ./build/cloudbridge-client-linux-amd64 --help

      - name: Create checksums
        run: |
          cd build
          sha256sum * > checksums.txt

      - name: Generate version
        id: version
        run: |
          # Read version from VERSION file and append commit hash
          BASE_VERSION=$(cat VERSION | tr -d ' ')
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION="${BASE_VERSION}-${COMMIT_HASH}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Release ${{ steps.version.outputs.version }}"
          body: |
            ## CloudBridge Client Release
            
            **Version:** ${{ steps.version.outputs.version }}
            **Commit:** ${{ github.sha }}
            **Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            
            ### Changes
            - Automated release from main branch
            - All tests and linting passed
            - Multi-platform builds (Windows, Linux, macOS)
            
            ### Downloads
            Choose the appropriate binary for your platform:
            - **Windows (x64):** `cloudbridge-client-windows-amd64.exe`
            - **Windows (ARM64):** `cloudbridge-client-windows-arm64.exe`
            - **Linux (x64):** `cloudbridge-client-linux-amd64`
            - **Linux (ARM64):** `cloudbridge-client-linux-arm64`
            - **macOS (x64):** `cloudbridge-client-darwin-amd64`
            - **macOS (ARM64):** `cloudbridge-client-darwin-arm64`
            
            ### Installation
            ```bash
            # Download and make executable (Linux/macOS)
            chmod +x cloudbridge-client-linux-amd64
            
            # Run with your JWT token
            ./cloudbridge-client-linux-amd64 --token "your-jwt-token"
            ```
          files: |
            build/cloudbridge-client-windows-amd64.exe
            build/cloudbridge-client-windows-arm64.exe
            build/cloudbridge-client-linux-amd64
            build/cloudbridge-client-linux-arm64
            build/cloudbridge-client-darwin-amd64
            build/cloudbridge-client-darwin-arm64
            build/checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 